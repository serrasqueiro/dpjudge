<:
import codecs
open = codecs.open

#	--------------------------------------------------------
#	This function outputs the whole mess of rule checkboxes
#	--------------------------------------------------------
def ruleBoxes(variant = None, mapName = None):
	if page.game:
		variant = page.game.status[0]
		gameMap = page.game.map
		mapName = gameMap.name
		gameRules = page.game.rules
		changeZero = page.game.phase == 'FORMING'
	else: gameMap, gameRules, changeZero = Map(mapName), [], 1
	page.write(
		"""
		<script>
		function describe(rule)
		{
			window.open('<URL>?page=showRule&rule=' + rule, 'rule',
				'width=400,height=120,status=no,toolbar=no,resizable=yes,' +
				'scrollbars=yes')
		}
		function radio(rule,rules)
		{
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			if (!checked || rules == "") return true;
			deniers = rules.split(',');
			for (i = 0; i < deniers.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+deniers[i]])
						document.all['RULE_'+deniers[i]].checked = false;
				}
				else if (document.getElementById(deniers[i]))
					document.getElementById('RULE_'+deniers[i]).checked = false;
			return true;
		}
		function notIf(rule,rules)
		{
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			if (!checked || rules == "") return true;
			deniers = rules.split(',');
			for (i = 0; i < deniers.length; ++i)
			{
				if (document.all)
				{
					if (document.all['RULE_'+deniers[i]]
					&& document.all['RULE_'+deniers[i]].checked)
					{
						document.all['RULE_'+rule].checked = false;
						alert(rule + " is incompatible with " + deniers[i]);
						return false;
					}
				}
				else if (document.getElementById('RULE_'+deniers[i])
					 &&  document.getElementById('RULE_'+deniers[i]).checked)
				{
						document.getElementById('RULE_'+rule).checked = false;
						alert(rule + " is incompatible with " + deniers[i]);
						return false;
				}
			}
			return true;
		}
		function toggle(rule,rules)
		{
			if (rules == "") return true;
			forcees = rules.split(',');
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			for (i = 0; i < forcees.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+forcees[i]])
					{
						if (checked)
							document.all['RULE_'+forcees[i]].checked = true;
						document.all['RULE_'+forcees[i]].disabled = checked;
					}
				}
				else if (document.getElementById('RULE_'+forcees[i]))
				{
					if (checked)
						document.getElementById('RULE_'+forcees[i]).checked = true;
					document.getElementById('RULE_'+forcees[i]).disabled = checked;
				}
			return true;
		}
		function turnOn(rule,rules)
		{
			if (rules == "") return true;
			forcees = rules.split(',');
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			for (i = 0; i < forcees.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+forcees[i]]&&checked)
						document.all['RULE_'+forcees[i]].checked = true;
				}
				else if (document.getElementById('RULE_'+forcees[i])&&checked)
					document.getElementById('RULE_'+forcees[i]).checked = true;
			return true;
		}
		</script>
		""")
	page.write('<tr><td colspan=3><hr></td></tr>')
	page.write('<tr><td colspan=3><table width=100%>')
	mapRules = [x for x in page.game.rules if x in gameMap.rules]
	if mapRules:
		page.write('<tr><td class="bodycopy"><b>Map Rules (%s map)</b></td>' %
			mapName)
		for rcount, rule in enumerate(mapRules):
			if rcount and rcount % 3 == 0: page.write('</tr><tr><td></td>')
			page.write(
				"""
				<td class="bodycopy"><a target=rules
				href=<URL>?page=Rules#%s>%s</td>
				""" % (rule, rule))
		page.write('</tr>')
	rules, forced, denied = page.game.loadRules()
	forced, enforced, on, off = forced.get(variant, []), [], [], []
	for nope in denied.get(variant, []):
		try: del rules[nope]
		except: pass
	groups = sorted(set([x['group'] for x in rules.values()
		if x['variant'].lower() in ('', variant)]))
	gameRules = [x for x in gameRules if x in rules] # for old games w/bad rules
	map(enforced.extend, [rules[x].get('+', []) for x in gameRules])
	map(off.extend, [rules[x].get('-', []) for x in gameRules])
	if gameRules: map(on.extend, [y for y in rules[x].get('=', [])
		for x in gameRules if y not in off])
	for group in groups:
		guys = sorted([x for x in rules
			if rules[x]['group'] == group and x not in forced])
		if not guys: continue
		if mapRules or group != groups[0]: page.write(
			'<tr><td colspan=4 align=center><hr width=50%></td></tr>')
		page.write('<tr><td class="bodycopy"><b>%s Rules:</b></td>' %
			' '.join(group.split()[1:]))
		for count, rule in enumerate(guys):
			if count and count % 3 == 0: page.write('</tr><tr><td></td>')
			page.write(
				"""
				<td nowrap class=bodycopy><input type=checkbox
				name=RULE_%s id=RULE_%s %s %s
				onclick=return(radio('%s','%s')&&notIf('%s','%s')&&toggle('%s','%s')&&turnOn('%s','%s'));
				>&nbsp;<a href="javascript: describe('%s')"
				onMouseOver="window.status='Show Description of %s';return(1);"
				onMouseOut="window.status='';return(1);">%s</a></td>
				""" % (rule, rule,
					' checked' * (rule in gameRules + enforced + forced + on),
					' disabled' * ((rule in enforced + forced)
					or (group[0][0] == '0' and not changeZero)
					or rule in page.game.metaRules),
					rule, ','.join([x for x in rules[rule].get('-',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('!',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('+',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('=',[])
						if x not in forced]),
					rule, rule, rule))
			count += 1
		page.write('</tr>')

	page.write('</td></tr></table>')

#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def changeButton():
	if page.game.deadline: com = ''
	else: com = '//'
	page.write("""
		<script>
		function ProcNow()
		{
			document.master.currpower.value = "NO POWERS";
			document.master.proc_now.value = "now";
			document.master.submit();
		}
		function prepSubmit()
		{
			%sdocument.master.date.value=document.master.deadline.value;
			if(typeof document.master.resign != "undefined")
			{
				document.master.dataresigned.value = document.master.resign.checked;
				document.master.datadummy.value = document.master.dummy.checked;
				document.master.currpower.value = document.master.powerChoice.options[
				document.master.powerChoice.options.selectedIndex].text;
				document.master.proc_now.value = "not_now";
			}
			else
			{
				document.master.dataresigned.value = "";
				document.master.datadummy.value = "";
				document.master.currpower.value = "NO POWERS";
				document.master.proc_now.value = "not_now";
			}
			document.master.submit();
		}
		</script>
		<tr><td></td></tr><tr><td align=center colspan=3>
		<%sinput type=%s
		class=inputSubmit value="Submit Updates">
		</td></tr>
		</form>
		""" % (com, '!'[page.pwdFlag == 1:],
		('submit', 'button onClick=prepSubmit()')[page.power.name == 'MASTER']))

#	----------------------------------------------------------------------
#	This function parses the status file, only outputting the lines that 
#	 are not able to be modified with the buttons/listboxes/etc that we
#	 are implementing.
#	----------------------------------------------------------------------
def outStatusFile():
	hidden = ('GAME', 'START', 'DELAY', 'FINISH', 'RESULT', 'PHASE', 'AWAIT',
		'WAIT', 'SKIP', 'NEED')
	implemented = ('DESC', 'DESCRIPTION', 'GAME', 'DEADLINE', 'ZONE', 'NAME',
		'MORPH', 'MASTER', 'RULE', 'RULES', 'PRIVATE', 'MAP', 'TRIAL',
		'PASSWORD', 'PROCESSED')
	modal = ('DESC', 'DESCRIPTION', 'NAME', 'MORPH')
	noshow, mode = hidden + implemented, None
	file, outfile = open(page.game.file('status'), encoding='latin-1'), ''
	for line in file:
		word = line.upper().split()
		if mode:
			if mode not in noshow: outfile += line
			if word == ['END', mode]: mode = None
		else:
			if not word: break
			if len(word) == 1 and word[0] in modal: mode = word[0]
			if word[0] not in noshow: outfile += line
	file.close()
	return outfile
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def showStatusFile():
	statFile = page.game.file('status')
	page.write('<form method=post name=master>')
	hideBack('Update')
	apprise('stamp', int(os.path.getmtime(statFile)))
	apprise('currpower', 'NO POWERS')
	comprise(['dataresigned', 'datadummy', 'proc_now'])
	# This is the new section
	#print '<tr><td colspan=3><hr></td></tr>'

	if 'preparation' not in page.game.status:
		page.write('<tr><td class=bodycopy><b>Current&nbsp;Game&nbsp;State:</b>'
			'</td><td><select class=inputBox name=gameMode>')
		for mode in (['forming'] * (page.game.phase == 'FORMING') +
			['active', 'waiting'] * (page.game.phase != 'COMPLETED') +
			['completed'] * (page.game.phase == 'COMPLETED') +
			['terminated']):
			page.write('<option value=%s%s>%s' %
				(mode, ' selected' * (mode in page.game.status), mode.title()))
		page.write("""
			</select></td>
			<td align=right colspan=1>
			<%sinput type=%s class=inputSubmit value="Submit Updates">
			</td></tr>
		""" % ('!'[page.pwdFlag == 1:],
		('submit', 'button onClick=prepSubmit()')[page.power.name == 'MASTER']))
	page.write("""
		<tr><td class=bodycopy><b>Password:</b>
			<td><input class=bodycopy name=newPassword value="%s"></td>
		""" % page.game.password)
	if page.game.phase not in ('FORMING', 'COMPLETED') and page.pwdFlag == 1:
		page.write("""
		<td align=right colspan=1>
		<input type=%s class=inputSubmit value="Process Game">
		</td>
		""" % 
		('process', 'button onClick=ProcNow()')[page.power.name == 'MASTER'])
	page.write('</tr>')
	page.write("""
		<script>
		function policy()
		{
			if (document.master.privacy.selectedIndex)
			{
				document.master.private.style.visibility = 'visible';
				document.master.private.focus();
			}
			else document.master.private.style.visibility = 'hidden';
		}
		</script>
		<tr><td class=bodycopy><b>Player Policy:</b>
			<td><select name=privacy onchange=policy() class=bodycopy>
				<option value=public%s>Public Game
				<option value=private%s>Private Game With Password:
				</select>
				<input style=visibility:%s name=private value="%s"
				class=bodycopy>
			</td>
		</tr>
		""" % ( ' selected' * (page.game.private is None),
				' selected' * (page.game.private != None),
				('visible', 'hidden')[page.game.private is None],
				page.game.private or ''))
	page.write("<tr class=bodycopy><td><b>Variant:</b><td>")
	varLocked = page.game.phase != 'FORMING'
	page.write('<select class=bodycopy name=%s %s>' %
		(('curVariant', 'wontPost')[varLocked], 'disabled' * varLocked))
	dirs = sorted([x for x in os.listdir('<PKG>/variants')
				if os.path.isdir('<PKG>/variants/' + x)])
	#	----------------------------------------------------------------
	#	Make sure Standard Diplomacy is listed before any other variants
	#	----------------------------------------------------------------
	curVariant = 'standard'
	if 'standard' in dirs:
		dirs.remove('standard')
		dirs.insert(0, 'standard')
	for dir in dirs:
		try: name = __import__('DPjudge.variants.' + dir,
								globals(), locals(), dir).VARIANT
		except: continue
		selected = page.game.__class__.__name__.lower().startswith(dir)
		if selected: curVariant = dir
		page.write('<option value=%s %s>%s Diplomacy' % (dir,
			'selected' * selected,
			{'xtalball': 'Crystal Ball'}.get(dir, dir.title())))
	page.write('</select></td></tr>')
	if varLocked: apprise('curVariant', curVariant)
	page.write("<tr class=bodycopy><td><b>%sMap:</b><td>" %
		('Trial ' * page.game.map.trial))
	if page.game.phase == 'FORMING':
		gameFile  = page.game.map.name + '.map'
		page.write('<select class=bodycopy name=map>')
		for trial in range(2):
			dir = '<PKG>/' + ['maps', 'trials'][trial]
			if page.game.map.trial: same = trial
			else: same = not trial
			files = os.listdir(dir)
			if same and gameFile not in files: files += [gameFile]
			if not files: continue
			if trial: page.write('<optgroup label="Trial Maps">')
			for file in sorted(files):
				if not file.endswith('.map'): continue
				map = file.split('.')[0]
				page.write('<option value=%s%s>%s</option>' %
					('*' * trial + map,
					' selected' * (same and gameFile == file),
					('(%s)' % map, map)[os.path.isfile(dir + '/' + file)]))
			if trial: page.write('</optgroup>')
		page.write("</select>")
	else: page.write(page.game.map.name)
	page.write("</td></tr>")
	desc = ' '.join(page.game.desc)
	page.write("""
		<tr><td class="bodycopy" align="left"
		valign=top><b>Description:</b></td>
		<td class="bodycopy"><textarea class=bodycopy name=desc rows=%d
		cols=80>%s</textarea></tr>
		""" % (len(desc) / 80 + 1, desc))
	desc = ' '.join(page.game.origin)
	page.write("""
		<tr><td class="bodycopy" align="left" nowrap
		valign=top><b>Origin of Name:</b></td>
		<td class="bodycopy"><textarea class=bodycopy name=origin rows=%d
		cols=80>%s</textarea></tr>
		<tr><td class="bodycopy" nowrap align="left">
		""" % (len(desc) / 80 + 2, desc))
	if page.game.deadline:
		dead = page.game.deadline
		dead = '%s-%s-%s' % (dead[4:6], dead[6:8], dead[:4])
		page.write("""
			<script language="javascript" type="text/javascript"
			src="<URL>/scripts/dater"></script>
			<b>Deadline:</b></td>
			""")
		apprise('date', dead)
		page.write("""
			<td class="bodycopy" colspan=2><b><input disabled name=deadline
			id=deadline type=text size=12 value="%s" class=bodycopy>
			<a onmouseover=this.style.cursor='pointer'
			onclick="NewCal('deadline','mmddyyyy',false,24)">
			<img border=0 src=<URL>/images/cal.gif></a>
			at <input type=text size=2 maxlength=2 name=hour
			class=bodycopy value=%s>:<input class=bodycopy
			type=text size=2 maxlength=2 name=minute value=%s>
			Time Zone:&nbsp;
			""" % (dead, page.game.deadline[8:10],
				page.game.deadline[-2:]))
	else: page.write("<b>Time Zone:</b></td><td>")
	page.write("<select class=bodycopy name=zone>")
	if not page.game.zone: page.game.setTimeZone()
	zoneGroups = TimeZone().groupZones()
	for label in sorted(zoneGroups.keys(),
		key=lambda x: not x and 10000 or int(x[3:].ljust(5, '0')), reverse=1):
		if label: page.write('<optgroup label="%s">' % label)
		for zone in sorted(zoneGroups[label]):
			page.write('<option %s>%s</option>' %
				(' selected' * (zone == page.game.zone.__repr__()), zone))
	page.write('</select></td></tr>')
	if page.game.avail: page.write("""
		<tr><td class="bodycopy" align="left"><b>Powers Needed:</b></td>
			<td class="bodycopy">%s</td></tr>
		""" % ', '.join(page.game.avail))
	if page.game.processed: page.write("""
		<tr><td class="bodycopy" align="left" colspan=2>Last processed on %s
		</td></tr>
		""" % page.game.processed.format(1))
	powerData()
	ruleBoxes()
	page.write("""
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Map morphings:</b></td>
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=morphs rows=%d cols=80
		wrap=off>%s</textarea></td></tr>
		""" % (len(page.game.morphs) + 1, '\n'.join(page.game.morphs)))
	extra = outStatusFile()
	page.write("""
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Other Game Data:</b></td>
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=status rows=%d cols=80
		wrap=off>%s</textarea></td></tr>
		""" % (extra.count('\n') + 1, extra))

	# Buttons and links Section
	page.write('<tr><td colspan=3><hr></td></tr>')
	page.write("""
		<tr><td nowrap valign=top><a href=<URL>?page=StatusHelp target=status>
				<font color=red>[Status File Help]</font></a></td>
			<td nowrap align=center>
		""")
	apprise('list', 'LIST')
	apprise('access', '')
	page.write("""
				<a href=# onclick="document.master.access.value=1;
				document.master.submit();return false;">
				<font color=red>[View Access Log]</a></td>
			<td nowrap align=right valign=top>
				<a href=<URL>?page=Rules target=rules>
				<font color=red>[Game Rules Help]</font></a></td></tr>
		""")
	if 'preparation' in page.game.status: page.write("""
		<tr><td colspan=3 align=center><table border cellpadding=10>
		<tr><th class=bodycopy bgcolor=yellow><input type=checkbox name=form>
		<select name=formMode><option value=forming>Allow Game To Form
		<option value=active>Set Game To Active
		</select></th></tr></table></td></tr>
		""")
	changeButton()
	page.write('</td>') #</tr>')
	# End of Buttons and links Section
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def showAccessLog():
	access = page.game.file('access')
	try:
		file = open(access, encoding='latin-1')
		contents = ''.join([x for x in reversed(file.readlines())]) # file.read()
		file.close()
	except: contents = '(No Accesses Logged)'
	page.write("""
		<tr valign=top bgcolor="#CCCCCC">
		<td align=center class="grey"><b>Game Access Log</b></td>
		</tr>
		<tr><td align=center class=bodycopy>
		<blockquote><b><p align=justify>&nbsp;<br>
		The DPjudge game access log is only one of a large number
		of methods by which potential problem players (cheaters) can
		be detected.  If you suspect that any person is playing more
		than one power, you can check the IP addresses and times at
		which those powers have logged in at the Website, and
		<a href="mailto:%s?subject=CHEATING in %s"><font color=red>report
		any issue to the judgekeeper!!</font></a>
		Again, a number of other automatic checks are continually
		occurring -- it is possible that the judgekeeper may already
		be aware of and monitoring an issue.</p></b></blockquote>
		<textarea cols=88 rows=20>%s</textarea><p>
		""" % (host.judgekeeper, page.game.name, contents))
	goBack()
	page.write('<br>&nbsp;<BR></td></tr>')
	footer()
	raise SystemExit
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addOption(option):
	page.write(
		"""
		<input type="checkbox" name="%s">&nbsp;<a
			href="javascript: describeOption('%s')"
			onMouseOver="window.status='Show Description of %s';return(1);"
			onMouseOut="window.status='';return(1);">%s</a>
		""" % (option.lower(), option, option, option))
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addRoll(phase, forward = 0):
	game = page.game
	if page.power.name != 'MASTER' or game.phase == 'COMPLETED' and (
		forward or not page.password or host.judgePassword != page.password):
		return
	if forward:
		if phase != 'FORMING': phase = game.phaseLong(phase)
		phase = game.probeNextPhase(phase)
		if not phase: return
		phase = game.phaseAbbr(phase)
	statFile = game.file('status')
	page.write(
		"""
		<script>
		function describeOption(option)
		{
			window.open('<URL>?page=showRule&file=Email&tag=OPTION&rule=' +
				option, 'option', 'width=400,height=120,status=no,' +
				'toolbar=no,resizable=yes,scrollbars=yes')
		}
		function rollto() {
			var full = "while", restore = "while";
			confirmation = "Roll%s to " + document.roll.phase.value;
			if (document.roll.phase.value != "FORMING") {
				if (!document.roll.restore.checked) restore = "without";
				confirmation += " " + restore + " restoring orders, and";
			}
			if (!document.roll.full.checked) full = "without";
			confirmation += " " + full + " restoring all non-transient" +
				" parameters, like rules, game description," +
				" resigned players, etc.?";
			if (!confirm(confirmation)) {
				return false;
			}
			document.roll.submit();
		}
		</script>
		<form name=roll method=post>
		""" % (forward and ' forward' or 'back'))
	hideBack('Update')
	apprise('action', 'roll' + (forward and 'forward' or 'back'))
	apprise('stamp', int(os.path.getmtime(statFile)))
	apprise('phase', phase)
	page.write("""
		<input type="button" value="Roll%s to %s" class="inputSubmit"
		onclick="rollto()"> <b>with</b>
		""" % (forward and ' forward' or 'back', phase))
	addOption('FULL')
	if phase != 'FORMING': addOption('RESTORE')
	page.write('</form>')
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def powerData():
	if not page.game.powers: return
	for num, power in enumerate(page.game.powers):
		apprise('powerData%d' % num, '')
	page.write(
		"""
		<script>
		var lastPower = 0;
		var powerData = new Array();
		var isGone = new Array();
		var isDummy = new Array();
		var isUnplayed = new Array();
		var powerType = new Array();
		function fillPower()
		{
			powerData[lastPower] = document.master.powerData.value;
			lastPower = document.master.powerChoice.options.selectedIndex;
			document.master.powerData.value = powerData[lastPower];
			document.master['powerData' +
				document.master.powerChoice.options[lastPower].value].value =
				powerData[lastPower];
			document.master.resign.checked = isGone[lastPower];
			document.master.resign.disabled = isGone[lastPower]
				&& isUnplayed[lastPower];
			document.master.dummy.checked = isDummy[lastPower];
			document.master.dummy.disabled = powerType[lastPower] != ""
				|| isDummy[lastPower] && isUnplayed[lastPower];
		}
		""")
	text = first = isGone = isDummy = ''
	for num, power in enumerate(page.game.powers):
		text += '<option value=%d>%s</option>' % (num, power.name)
		item = `power`.strip()
		page.write('powerData[%d] = %s;\n' % (num, `item`))
		gone, dum = power.isResigned(), power.isDummy()
		unplay = len(power.player) < (gone and 3 or dum and 3 or 1)
		page.write('powerType[%d] = "%s";' % (num, power.type or ''))
		page.write('isDummy[%d] = %s;' % (num, ('false', 'true')[dum]))
		page.write('isGone[%d] = %s;' % (num, ('false', 'true')[gone]))
		page.write('isUnplayed[%d] = %s;' % (num, ('false', 'true')[unplay]))
		page.write('document.master["powerData%s"].value = %s' %
			(`num`, `item`))
		if not first:
			first = `power`
			isGone = ('checked' + ' disabled' * unplay) * gone
			isDummy = power.type and 'disabled' or (
				'checked' + ' disabled' * unplay) * dum
	page.write(
		"""
		function alterPlayer(checkbox)
		{
			var act = checkbox.name;
			if (!checkbox.checked) act = "revive";
			var who = document.master.powerChoice.options[
				document.master.powerChoice.options.selectedIndex].text;
			if (!confirm("Are you sure you want to " + act + " " + who + "?"))
			{
				checkbox.checked = !checkbox.checked;
				return false;
			}
			prepSubmit();
		}
		</script>
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Data&nbsp;for:&nbsp;<select class=inputBox
		name=powerChoice onchange=fillPower()>%s</select>
		<br><br>
		Resign&nbsp;this&nbsp;power?&nbsp;<input type=checkbox %s name=resign
			onclick="alterPlayer(this)">
		<br>
		Make a <tt>DUMMY</tt>? <input type=checkbox %s name=dummy
			onclick="alterPlayer(this)">
		</b></td>
		""" % (text, isGone, isDummy))
	page.write(
		"""
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=powerData wrap=off
		rows=20 cols=80>%s</textarea>
		</td></tr>
		""" % first)
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def reportUpdateError(error):
	page.write("""
		<tr><th align=left class=bodycopy bgcolor=red><font color=yellow>
		<center><font size=2>&nbsp;<br>Update Aborted</font>
		</center><blockquote> %s
		</blockquote><center>
		""" % error)
	goBack()
	page.write("""
		</center><blockquote>Note that if you use your browser's
		"Back" button to return to the status page (rather than the
		button above), you will need to "Reload" the screen to see
		the latest contents of the status file before making
		changes.</blockquote>
		</th></tr>
		""")
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def updateMaster():
	statFile = page.game.file('status')
	if page.stamp != `int(os.path.getmtime(statFile))`:
		return reportUpdateError(
			"""
			While you were entering your modifications,
			the game status file was updated by another participant in the
			game or by the DPjudge.  Your changes were not made.
			""")
	#	----------
	#	Roll phase
	#	----------
	if page.setdefault('action') in ('rollback', 'rollforward'):
		flags = page.has('restore') * 1 + page.has('full') * 2 + (
			host.judgePassword and page.password == host.judgePassword) * 16
		if page.action == 'rollforward':
			error = page.game.rollforward(page.phase, flags | 4)
		else: error = page.game.rollback(page.phase, flags)
		if error: return reportUpdateError(error + '.')
		return finished()
	#	----------------
	#	Process the turn
	#	----------------
	if vars(page)['proc_now'] == "now":
		error = page.game.process(now=1)
		if error: return reportUpdateError(error + '.')
		return finished()
	#	----------------------
	#	Game mode modification
	#	----------------------
	gameMode = page.game.status[1:]
	if 'form' in vars(page) and page.form and 'formMode' in vars(page):
		page.gameMode = page.formMode
	if 'gameMode' in vars(page):
		if page.gameMode == 'active':
#			page.game = Game(page.game.name)
			if page.game.phase == 'FORMING': 
				if page.game.status[1] == 'waiting':
					page.game.status[1] = 'forming'
				responding = page.game.begin() or ''
				untouched = responding and 'No ' or ''
				return finished(untouched + 'Update Made', responding)
		gameMode[0] = page.gameMode
		page.game.status[1:] = gameMode
	if (page.list == 'LIST') == ('unlisted' in gameMode):
		try: gameMode.remove('unlisted')
		except: gameMode += ['unlisted']
	games = Status()
	games.update(page.game.name, gameMode, page.curVariant)
	for guy in ('desc', 'origin', 'zone', 'status', 'morphs'):
		if guy not in vars(page): vars(page)[guy] = ''
	#	------------------
	#	Update status file
	#	------------------
	#	NEW STUFF (TO BE USED TO UPDATE WITH)
	if 'map' in vars(page):
		trial = page.map[:1] == '*'
		page.game.map = Map(page.map[trial:], trial)
	if page.password == page.game.password: page.password = page.newPassword
	page.game.password = page.newPassword
	if page.privacy == 'public': page.game.private = None
	else: page.game.private = page.private
	if page.desc: page.game.desc = page.desc.split('\n')
	else: page.game.desc = []
	if page.origin: page.game.origin = page.origin.split('\n')
	else: page.game.origin = []
	if page.morphs: page.game.morphs = page.morphs.split('\n')
	else: page.game.morphs = []
	page.extra = page.status.split('\n')
	extract('JUDGE', isList = 1)
	extract('BEGIN', 'firstPhase')
	extract('START')
	extract('FINISH', 'end')
	extract('RESULT', 'outcome', 1)
	extract('SIGNON')
	extract('NEED', 'avail', 1)
	extract('ROTATE', isList = 1)
	extract('NEWHOME', 'homeYears', 1)
	page.game.rules = [x[5:] for x in vars(page) if x[:5] == 'RULE_']
	extract('ALLOW', 'playerTypes', 1)
	extract('FLOW', isList = 1)
	extract('VICTORY', isList = 1)
	extract('PROPOSAL', isList = 1)
	deathnote = None
	if page.zone != page.game.zone and page.game.zone.__repr__() or 'GMT':
		page.game.setTimeZone(page.zone)
		deathnote = ('The Master has changed the time zone for ' +
			"game '%s' to %s (%s).\n" % (
			page.game.name, page.zone, TimeZone(page.zone).gmtlabel()))
	if 'NO_DEADLINE' in page.game.rules: page.game.deadline = None
	elif 'date' in vars(page):
		dead = map(int, page.date.split('-'))
		deadline = ('%d%02d%02d' % (dead[2], dead[0], dead[1]) +
			page.hour + page.minute)
		if deadline != page.game.deadline:
			page.game.deadline = page.game.getTime(deadline)
			if not deathnote:
				deathnote = ('The deadline for game ' +
					"'%s' has been changed by the Master.\n" % page.game.name)
	else:
		page.game.setDeadline()
		deathnote = 'The NO_DEADLINE rule has been removed.\n'
	if deathnote and page.game.deadline:
		deathnote += 'The deadline is now %s.\n' % page.game.timeFormat()
		page.game.mailPress(None, ['All!'], deathnote,
			subject = 'Diplomacy deadline changed')
	extract('DELAY')
	extract('PROCESSED')
	extract('RESERVES', 'extra', 1)
	extract('MILITIA', 'defense', 1)
	page.game.timing = None	# it will be in page.extra if given....
	page.game.terrain = {}	# ditto this guy as well
	if page.game.tester and page.game.tester[-1:] == '!':
		page.game.tester = ''	# and this one?
	if 'corrupt' in page.game.status: return finished()
	#--------------
	# Write the file
	#--------------
	try:
		file = open(statFile, 'w')
		temp = unicode(`page.game`, 'latin-1').strip()
		file.write(temp.encode('latin-1'))
		del temp
		if page.extra:
			temp = '\n' + '\n'.join(page.extra).strip()
			file.write(temp.encode('latin-1'))
			del temp
		for num, power in enumerate(page.game.powers):
			temp = '\n\n%s' % \
				vars(page)['powerData%s' % `num`].replace('\015','')
			file.write(temp.encode('latin-1'))
			del temp
		file.close()
	except:
		page.write('<H1 align=center>Cannot write to Status File!</H1>')
		print statFile
		import traceback
		print '<!--'
		traceback.print_tb(os.sys.exc_traceback, None, os.sys.stdout)
		traceback.print_exc(None, os.sys.stdout)
		print '-->'
		return
	oldState = dict(page.game.state)
	page.game = page.game.__class__(page.game.name)
	page.game.state = oldState
	try: games.dict[page.game.name].remove('private')
	except: pass
	if page.game.private: games.dict[page.game.name] += ['private']
	games.save()
	try: os.chmod(page.game.fileName, 0666)
	except: pass
	gamename = page.game.name
	page.game.updateState()
	checkErrors()
	finished()
	####################################################
	### Now that we've updated the file, let's look at
	### specific functionality that would require re-
	### writing the web page data (i.e. we can't do it
	### above, but only with the file directly).
	####################################################
	rd_game = Status().load(gamename)
	if 'groups' in vars(page):
		if rd_game.groups != page.game.groups:
			rd_game.groups = page.game.groups
	if vars(page)['currpower'] != "NO POWERS":
		resign = vars(page)['dataresigned']
		dummy = vars(page)['datadummy']
		for target in rd_game.powers:
			if target.name == vars(page)['currpower']:
				if resign == 'true' and not target.isResigned():
					target.resign(byMaster = 1)
				elif resign == 'false' and target.isResigned():
					target.takeover(byMaster = 1)
				elif dummy == 'true' and not target.isDummy(): target.dummy()
				elif dummy == 'false' and target.isDummy():
					target.takeover(byMaster = 1)
	rd_game.save()
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def extract(key, var = 0, isList = 0):
	if not var: var = key.lower()
	for line in page.extra:
		word = line.split()
		if word and word[0].upper() == key.upper():
			page.extra.remove(line)
			val = word[1:]
			vars(page.game)[var] = word[1:]
			if not isList: val = ' '.join(val)
			vars(page.game)[var] = val
			return
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def checkErrors():
	if not page.game.error and not page.game.map.error: return
	if page.power and page.power.name != 'MASTER':
		page.write("""
			<script>
			alert(" Problems Found in Game %s File!" +
				"\\nPlease Report This To The GameMaster!");
			window.history.back();
			</script>
			""" % (page.game.map.error and 'Map' or 'Status'))
		raise SystemExit
	statuserror = [x for x in page.game.error
		if x not in page.game.map.error]
	if statuserror:
		page.write(
			"""
			<tr valign=top bgcolor="#CCCCCC">
			<th bgcolor=yellow class=bodycopy>
			<font color=red size=3>Problems Found in Game Status File</th></tr>
			<tr valign=top><th bgcolor=red class=bodycopy>
			<font color=yellow size=3><pre>
			""")
		map(page.write, statuserror)
		page.write('</pre></td></tr>')
	if page.game.map.error:
		page.write(
			"""
			<tr valign=top bgcolor="#CCCCCC">
			<th bgcolor=yellow class=bodycopy>
			<font color=red size=3>Problems Found in Game Map File</th></tr>
			<tr valign=top><th bgcolor=red class=bodycopy>
			<font color=yellow size=3><pre>
			""")
		map(page.write, page.game.map.error)
		page.write('</pre></td></tr>')
#	----------------------------------------------------------------------
:>
