<:
import codecs, shutil
open = codecs.open

#	--------------------------------------------------------
#	This function outputs the whole mess of rule checkboxes
#	--------------------------------------------------------
def ruleBoxes(variant = None, mapName = None):
	if page.game:
		variant = page.game.status[0]
		gameMap = page.game.map
		mapName = gameMap.name
		gameRules = page.game.rules
		changeZero = page.game.phase == 'FORMING'
	else: gameMap, gameRules, changeZero = Map(mapName), [], 1
	page.write(
		"""
		<script>
		function describe(rule)
		{
			window.open('<URL>?page=showRule&rule=' + rule, 'rule',
				'width=400,height=120,status=no,toolbar=no,resizable=yes,' +
				'scrollbars=yes')
		}
		function radio(rule,rules)
		{
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			if (!checked || rules == "") return true;
			deniers = rules.split(',');
			for (i = 0; i < deniers.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+deniers[i]])
						document.all['RULE_'+deniers[i]].checked = false;
				}
				else if (document.getElementById(deniers[i]))
					document.getElementById('RULE_'+deniers[i]).checked = false;
			return true;
		}
		function notIf(rule,rules)
		{
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			if (!checked || rules == "") return true;
			deniers = rules.split(',');
			for (i = 0; i < deniers.length; ++i)
			{
				if (document.all)
				{
					if (document.all['RULE_'+deniers[i]]
					&& document.all['RULE_'+deniers[i]].checked)
					{
						document.all['RULE_'+rule].checked = false;
						alert(rule + " is incompatible with " + deniers[i]);
						return false;
					}
				}
				else if (document.getElementById('RULE_'+deniers[i])
					 &&  document.getElementById('RULE_'+deniers[i]).checked)
				{
						document.getElementById('RULE_'+rule).checked = false;
						alert(rule + " is incompatible with " + deniers[i]);
						return false;
				}
			}
			return true;
		}
		function toggle(rule,rules)
		{
			if (rules == "") return true;
			forcees = rules.split(',');
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			for (i = 0; i < forcees.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+forcees[i]])
					{
						if (checked)
							document.all['RULE_'+forcees[i]].checked = true;
						document.all['RULE_'+forcees[i]].disabled = checked;
					}
				}
				else if (document.getElementById('RULE_'+forcees[i]))
				{
					if (checked)
						document.getElementById('RULE_'+forcees[i]).checked = true;
					document.getElementById('RULE_'+forcees[i]).disabled = checked;
				}
			return true;
		}
		function turnOn(rule,rules)
		{
			if (rules == "") return true;
			forcees = rules.split(',');
			if (document.all) checked = document.all['RULE_'+rule].checked;
			else checked = document.getElementById('RULE_'+rule).checked;
			for (i = 0; i < forcees.length; ++i)
				if (document.all)
				{
					if (document.all['RULE_'+forcees[i]]&&checked)
						document.all['RULE_'+forcees[i]].checked = true;
				}
				else if (document.getElementById('RULE_'+forcees[i])&&checked)
					document.getElementById('RULE_'+forcees[i]).checked = true;
			return true;
		}
		</script>
		""")
	page.write('<tr><td colspan=3><hr></td></tr>')
	page.write('<tr><td colspan=3><table width=100%>')
	mapRules = [x for x in page.game.rules if x in gameMap.rules]
	if mapRules:
		page.write('<tr><td class="bodycopy"><b>Map Rules (%s map)</b></td>' %
			mapName)
		for rcount, rule in enumerate(mapRules):
			if rcount and rcount % 3 == 0: page.write('</tr><tr><td></td>')
			page.write(
				"""
				<td class="bodycopy"><a target=rules
				href=<URL>?page=Rules#%s>%s</td>
				""" % (rule, rule))
		page.write('</tr>')
	rules, forced, denied = page.game.loadRules()
	forced, enforced, on, off = forced.get(variant, []), [], [], []
	for nope in denied.get(variant, []):
		try: del rules[nope]
		except: pass
	groups = sorted(set([x['group'] for x in rules.values()
		if x['variant'].lower() in ('', variant)]))
	gameRules = [x for x in gameRules if x in rules] # for old games w/bad rules
	map(enforced.extend, [rules[x].get('+', []) for x in gameRules])
	map(off.extend, [rules[x].get('-', []) for x in gameRules])
	if gameRules: map(on.extend, [y for y in rules[x].get('=', [])
		for x in gameRules if y not in off])
	for group in groups:
		groupZero = group[0][0] == '0' and not changeZero
		guys = sorted([x for x in rules
			if rules[x]['group'] == group and x not in forced])
		if not guys: continue
		if mapRules or group != groups[0]: page.write(
			'<tr><td colspan=4 align=center><hr width=50%></td></tr>')
		page.write('<tr><td class="bodycopy"><b>%s Rules:</b></td>' %
			' '.join(group.split()[1:]))
		for count, rule in enumerate(guys):
			if count and count % 3 == 0: page.write('</tr><tr><td></td>')
			page.write(
				"""
				<td nowrap class=bodycopy><input type=checkbox
				name=RULE_%s id=RULE_%s %s %s
				onclick=return(radio('%s','%s')&&notIf('%s','%s')&&toggle('%s','%s')&&turnOn('%s','%s'));
				>&nbsp;<a href="javascript: describe('%s')"
				onMouseOver="window.status='Show Description of %s';return(1);"
				onMouseOut="window.status='';return(1);">%s</a></td>
				""" % (rule + '0' * groupZero, rule,
					' checked' * (rule in gameRules + enforced + forced + on),
					' disabled' * ((rule in enforced + forced)
					or groupZero or rule in page.game.metaRules),
					rule, ','.join([x for x in rules[rule].get('-',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('!',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('+',[])
						if x not in forced]),
					rule, ','.join([x for x in rules[rule].get('=',[])
						if x not in forced]),
					rule, rule, rule))
			if groupZero and rule in gameRules and rule not in (
				enforced + forced + page.game.metaRules):
				page.apprise('RULE_' + rule, 'on')
			count += 1
		page.write('</tr>')

	page.write('</td></tr></table>')

#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def changeMasterButton():
	page.write("""
		<script>
		function prepSubmit()
		{
			if (typeof document.master.private != "undefined") {
				if (document.master.private.value == '') {
					document.master.privacy.selectedIndex = 0;
				}
			}
			if (typeof document.master.powerChoice != "undefined") {
				document.master['powerData' +
					document.master.powerChoice.options[lastPower].value
				].value = document.master.powerData.value;
			}
			if (typeof document.master.resign != "undefined")
			{
				document.master.dataresigned.value = document.master.resign.checked;
				document.master.datadummy.value = document.master.dummy.checked;
				document.master.currpower.value = document.master.powerChoice.options[
				document.master.powerChoice.options.selectedIndex].text;
			}
			else
			{
				document.master.dataresigned.value = "";
				document.master.datadummy.value = "";
				document.master.currpower.value = "NO POWERS";
			}
			document.master.submit();
		}
		</script>
		<tr><td></td></tr><tr><td align=center colspan=3>
		<%sinput type=button onClick=prepSubmit()
		class=inputSubmit value="Submit Updates">
		</td></tr>
		</form>
		""" % ('!'[page.pwdFlag > 3:]))

#	----------------------------------------------------------------------
#	This function parses the status file, only outputting the lines that 
#	 are not able to be modified with the buttons/listboxes/etc that we
#	 are implementing.
#	----------------------------------------------------------------------
def outStatusFile():
	hidden = ('GAME', 'START', 'DELAY', 'FINISH', 'RESULT', 'PHASE', 'AWAIT',
		'WAIT', 'SKIP', 'NEED')
	implemented = ('DESC', 'DESCRIPTION', 'GAME', 'DEADLINE', 'ZONE', 'NAME',
		'MORPH', 'MASTER', 'RULE', 'RULES', 'PRIVATE', 'MAP', 'TRIAL',
		'ADDRESS', 'PASSWORD', 'PROCESSED', 'TIMING')
	modal = ('DESC', 'DESCRIPTION', 'NAME', 'MORPH')
	noshow, mode = hidden + implemented, None
	file, outfile = open(page.game.file('status'), encoding='latin-1'), ''
	for line in file:
		word = line.upper().split()
		if mode:
			if mode not in noshow: outfile += line
			if word == ['END', mode]: mode = None
		else:
			if not word: break
			if len(word) == 1 and word[0] in modal: mode = word[0]
			if word[0] not in noshow: outfile += line
	file.close()
	if page.game.timing: outfile += 'TIMING ' + ' '.join(
		map(' '.join, page.game.timing.items())) + '\n'
	return outfile
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def showMasterCommands():
	if page.power.omniscient < 3: return
	game = page.game
	stamp = int(os.path.getmtime(game.file('status')))
	if 'preparation' not in game.status:
		page.write('<tr><td colspan=3><hr></td></tr>')
		page.write('<form method=post><tr>')
		hideBack('Update')
		page.apprise('action', 'state')
		page.apprise('stamp', stamp)
		page.write('<tr><td class=bodycopy><b>Game&nbsp;State:</b>'
			'</td><td align=right><select class=inputBox name=gameMode>')
		for mode in (['forming'] * (game.phase == 'FORMING') +
			['active', 'waiting'] * (game.phase != 'COMPLETED'
			and ('forming' not in game.status or game.available() and 1)) +
			['completed'] * (game.phase == 'COMPLETED') +
			['terminated']):
			page.write('<option value=%s%s>%s' %
				(mode, ' selected' * (mode in game.status), mode.title()))
		page.write('</select></td>')
		if page.pwdFlag > 3: page.write('<td>'
			'<input type=submit class=inputSubmit value=Set></td>')
		page.write('</tr></form>')
		if game.deadline:
			page.write('<form method=post name=deadline><tr>')
			hideBack('Update')
			page.apprise('action', 'deadline')
			dead = game.deadline
			dead = '%s/%s/%s %s:%s' % (dead[:4], dead[4:6], dead[6:8],
				dead[8:10], dead[-2:])
			page.apprise('date', dead)
			page.write("""
				<script language="javascript" type="text/javascript"
				src="<URL>/scripts/dater"></script>
				<script>
				function deadSubmit() {
					document.deadline.date.value = document.deadline.dead.value;
					document.deadline.submit();
				}
				</script>
				<tr><td class=bodycopy><b>Deadline:</b></td>
				<td class="bodycopy" align=right><input disabled name=dead
				id=dead type=text size=19 class=numberBox value="%s">
				<a onmouseover=this.style.cursor='pointer'
				onclick="NewCal('dead','yyyymmdd',true,24,'%s')">
				<img border=0 src=<URL>/images/cal.gif></a>
				""" % (dead, game.zone))
			if page.pwdFlag > 3: page.write('<td><input type=button ' +
				'class=inputSubmit onClick=deadSubmit() value=Set></td>')
			page.write('</tr></form>')
			if 'NOT' in game.timing:
				absences = []
				for absence in game.timing['NOT'].split(','):
					if not absence: continue
					absences += [(absence, game.formatPeriod(absence, 5, 3))]
				if absences:
					page.write("""
						<script>
						function dropAbsence() {
							var presence = document.absences.presence;
							var period = presence.options[presence.selectedIndex].text;
							if (confirm("The absence " +
								period.charAt(0).toLowerCase() +
								period.slice(1) + " will be revoked.")) {
								document.absences.submit();
							}
						}
						</script>
						""")
					page.write('<form method=post name=absences><tr>')
					hideBack('Update')
					page.apprise('action', 'revoke')
					page.write("""
						<tr><td class=bodycopy><b>Absences:</b></td>
						<td class="bodycopy" align=right>
						<select class=bodycopy name=presence>
						""")
					for absence in absences[:-1]:
						page.write('<option value=%s>%s</option>' % absence)
					page.write('<option value=%s selected>%s</option>' % absences[-1])
					page.write('</select></td>')
					if page.pwdFlag > 3: page.write('<td><input type=button ' +
						'class=inputSubmit onClick=dropAbsence() ' +
						'value=Revoke></td>')
					page.write('</tr></form>')
	if page.pwdFlag < 4: return
	#	-------------------------
	#	Buttons and links Section
	#	-------------------------
	page.write("""
		</table><hr><table width=100%>
		<tr>
		<form method=post name=change>
		""")
	#	--------------------------------
	#	The table is more compact if the
	#	<td> is inside the <form>?!...
	#	--------------------------------
	hideBack('Password')
	page.write("""
		<td nowrap valign=top>
		<a href=# onclick="document.change.submit();return false;">
		<font color=red>[Change Password]</a>
		</td>
		</form>
		<form method=post name=settings>
		""")
	hideBack('Settings')
	page.write("""
		<td nowrap colspan=2 align=right valign=top>
		<a href=# onclick="document.settings.submit();return false;">
		<font color=red>[Edit Settings]</font></a>
		</form>
		</td>
		</tr>
		""")
	if 'preparation' in game.status or ('forming' in game.status
	and not game.available()):
		page.write("""
			<tr>
			<form method=post>
			""")
		hideBack('Update')
		page.apprise('action', 'form')
		page.apprise('stamp', stamp)
		mode = (game.available() or 'preparation' in game.status and
			'START_MASTER' in game.rules) and 'forming' or 'active'
		page.apprise('formMode', mode)
		page.write("""
			<td colspan=3 align=center>
			<input type=submit class=inputSubmit value="%s">
			</td>
			</form>
			</tr>
			""" % ('Allow Game To Form',
			'Set Game To Active')[mode == 'active'])
	elif game.phase not in ('FORMING', 'COMPLETED'):
		page.write("""
			<tr>
			<form method=post>
			""")
		hideBack('Update')
		page.apprise('action', 'process')
		page.apprise('stamp', stamp)
		page.write("""
			<td colspan=3 align=center>
			<input type=submit class=inputSubmit value="Process Turn">
			</td>
			</form>
			</tr>
			""")
	page.write("""
		<tr>
		<form method=post name=access>
		""")
	hideBack('Read')
	page.apprise('file', 'access')
	page.write("""
		<td nowrap colspan=3 valign=top>
		<a href=# onclick="document.access.submit();return false;">
		<font color=red>[View Access Log]</a>
		</td>
		</form>
		</tr>
		""")
	#	--------------------------------
	#	End of Buttons and links Section
	#	--------------------------------
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def showStatusFile():
	if page.power.omniscient < 3:
		return reportUpdateError(
			'Only the Master can edit the game status file.')
	game = page.game
	statFile = game.file('status')
	page.write('<form method=post name=master>')
	hideBack('Update')
	page.apprise('action', 'settings')
	page.apprise('stamp', int(os.path.getmtime(statFile)))
	page.apprise('currpower', 'NO POWERS')
	page.comprise(['dataresigned', 'datadummy'])
	page.write("""
		<script>
		function policy()
		{
			if (document.master.privacy.selectedIndex)
			{
				document.master.private.style.visibility = 'visible';
				document.master.private.focus();
			}
			else document.master.private.style.visibility = 'hidden';
		}
		</script>
		<tr><td class=bodycopy>
			<b><a href=<PAGE>Status#private>Player Policy:</a></b>
			<td><select name=privacy onchange=policy() class=bodycopy>
				<option value=public%s>Public Game
				<option value=private%s>Private Game With Password:
				</select>
				<input style=visibility:%s name=private value="%s"
				class=bodycopy>
			</td>
			<td align=center><%sinput type=button onClick=prepSubmit()
				class=inputSubmit value="Submit Updates">
			</td>
		</tr>
		""" % ( ' selected' * (game.private is None),
				' selected' * (game.private != None),
				('visible', 'hidden')[game.private is None],
				game.private or '',
				'!'[page.pwdFlag > 3:]))
	page.write("<tr class=bodycopy><td><b>Variant:</b></td><td>")
	curVariant = game.__class__.__name__[:-4].lower()
	try: varName = __import__('DPjudge.variants.' + curVariant,
		globals(), locals(), curVariant).VARIANT
	except: curVariant, varName = 'standard', 'Standard Diplomacy'
	if game.phase != 'FORMING':
		page.write(varName)
		page.apprise('curVariant', curVariant)
	else:
		variants = {varName: curVariant}
		page.write('<select class=bodycopy name=curVariant>')
		dirs = [x for x in os.listdir('<PKG>/variants')
			if os.path.isdir('<PKG>/variants/' + x)]
		for dir in dirs:
			if dir == curVariant: continue
			try: name = __import__('DPjudge.variants.' + dir,
				globals(), locals(), dir).VARIANT
			except: continue
			variants[name] = dir
		#	----------------------------------------------------------------
		#	Make sure Standard Diplomacy is listed before any other variants
		#	----------------------------------------------------------------
		varNames = sorted(variants.keys())
		if 'Standard Diplomacy' in varNames:
			varNames.remove('Standard Diplomacy')
			varNames.insert(0, 'Standard Diplomacy')
		for name in varNames:
			page.write('<option value=%s%s>%s</option>' % (variants[name],
				' selected' * (varName == name), name))
		page.write('</select>')
	page.write('&nbsp;&nbsp;&nbsp;&nbsp;<b>Unlist?</b>')
	page.write('<input type=checkbox name=unlist%s>' %
		(' checked' * ('unlisted' in game.status)))
	page.apprise('list', 'LIST')
	page.write('</td></tr>')
	page.write('<tr class=bodycopy><td>'
		"<b><a href=<PAGE>Status#map>%sMap:</a></b></td><td>" %
		('Trial ' * game.map.trial))
	if game.phase == 'FORMING':
		gameFile  = game.map.name + '.map'
		page.write('<select class=bodycopy name=map>')
		for trial in range(2):
			dir = '<PKG>/' + ['maps', 'trials'][trial]
			if game.map.trial: same = trial
			else: same = not trial
			files = os.listdir(dir)
			if same and gameFile not in files: files += [gameFile]
			if not files: continue
			if trial: page.write('<optgroup label="Trial Maps">')
			for file in sorted(files):
				if not file.endswith('.map'): continue
				map = file.split('.')[0]
				page.write('<option value=%s%s>%s</option>' %
					('*' * trial + map,
					' selected' * (same and gameFile == file),
					('(%s)' % map, map)[os.path.isfile(dir + '/' + file)]))
			if trial: page.write('</optgroup>')
		page.write("</select>")
	else: page.write(game.map.name)
	page.write('</td></tr>')
	desc = ' '.join(game.desc)
	page.write("""
		<tr><td class="bodycopy" align="left"
		valign=top><b><a href=<PAGE>Status#desc>Description:</a></b></td>
		<td colspan=2 class="bodycopy"><textarea class=bodycopy name=desc
		rows=%d cols=80>%s</textarea></td></tr>
		""" % (len(desc) / 80 + 2, desc))
	desc = ' '.join(game.origin)
	page.write("""
		<tr><td class="bodycopy" align="left" nowrap
		valign=top><b><a href=<PAGE>Status#name>Origin of Name:</a></b></td>
		<td colspan=2 class="bodycopy"><textarea class=bodycopy name=origin
		rows=%d cols=80>%s</textarea></td></tr>
		""" % (len(desc) / 80 + 2, desc))
	page.write("""
		<tr><td class="bodycopy" nowrap align="left">
		<b><a href="<PAGE>Status#timing">Timing:</a></b></td>
		<td colspan=2 class="bodycopy">
		""")
	game.timing.pop('NOT', '')
	times = game.timing.pop('AT', ':').split(',')
	at, times = times[-1].split(':'), times[:-1]
	page.write("""
		<b>At</b>&nbsp;<input type=text size=3 maxlength=2 name=thour
		class=numberBox value=%s><b>:</b><input class=numberBox
		type=text size=3 maxlength=2 name=tminute value=%s>
		""" % (at[0], at[1]))
	addTimeToDroplist('thour', 'tminute', 'ttime')
	addDroplist(times, 'ttime')
	addPeriod('Fudge', game.timing.pop('FUDGE', ''), 'tfudge', 1)
	page.write('<br />')
	page.write("""
		<b>Days</b>&nbsp;<input type=text size=10 maxlength=7 name=tdays
		class=numberBox value=%s>
		""" % game.timing.pop('DAYS', '-MTWTF-'))
	addPeriod('Start', game.timing.pop('START', ''), 'tstart', 1)
	page.write('<br />')
	try:
		move = [x for x in game.timing if not 'MOVEMENT'.find(x)][0]
		move = game.timing.pop(move)
	except: move = game.timing.get('NEXT', '3D')
	addPeriod('Next', game.timing.pop('NEXT', '1D'), 'tnext')
	addPeriod('Move', move, 'tmove')
	page.write('<br />')
	warn, warnings = '', game.timing.pop('WARN', '').split(',')
	if warnings: warn, warnings = warnings[-1], warnings[:-1]
	addPeriod('Warn', warn, 'twarn')
	addPeriodToDroplist('twarn', 'twarning')
	addDroplist(warnings, 'twarning')
	addPeriod('Grace', game.timing.pop('GRACE', ''), 'tgrace')
	page.write('</td></tr>')
	page.write("""
		<tr><td class="bodycopy" nowrap align="left">
		<b><a href=<PAGE>Status#zone>Time Zone:</a></b></td><td colspan=2>
		<select class=bodycopy name=zone>
		""")
	if not game.zone: game.setTimeZone()
	zoneGroups = TimeZone().groupZones()
	for label in sorted(zoneGroups.keys(),
		key=lambda x: not x and 10000 or int(x[3:].ljust(5, '0')), reverse=1):
		if label: page.write('<optgroup label="%s">' % label)
		for zone in sorted(zoneGroups[label]):
			page.write('<option %s>%s</option>' %
				(' selected' * (zone == game.zone.__repr__()), zone))
	page.write('</select></td></tr>')
	if game.avail: page.write("""
		<tr><td class="bodycopy" align="left"><b>Powers Needed:</b></td>
			<td class="bodycopy">%s</td></tr>
		""" % ', '.join(game.avail))
	if game.processed: page.write("""
		<tr><td class="bodycopy" align="left" colspan=2>Last processed on %s
		</td></tr>
		""" % game.processed.format(1))
	powerData()
	ruleBoxes()
	page.write("""
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Map morphings:</b></td>
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=morphs rows=%d cols=80
		wrap=off>%s</textarea></td></tr>
		""" % (len(game.morphs) + 1, '\n'.join(game.morphs)))
	extra = outStatusFile()
	page.write("""
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Other Game Data:</b></td>
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=status rows=%d cols=80
		wrap=off>%s</textarea></td></tr>
		""" % (extra.count('\n') + 1, extra))
	#	-------------------------
	#	Buttons and links Section
	#	-------------------------
	page.write('<tr><td colspan=3><hr></td></tr>')
	changeMasterButton()
	#	--------------------------------
	#	End of Buttons and links Section
	#	--------------------------------
	page.write('<tr><td colspan=3><hr></td></tr>')
	page.write("""
		<tr><td nowrap valign=top>
		<a href=<PAGE>Status target=status>
		<font color=red>[Status File Help]</font></a></td>
		<td nowrap align=right valign=top colspan=2>
		<a href=<PAGE>Rules target=rules>
		<font color=red>[Game Rules Help]</font></a></td></tr>
		""")
	page.write('<tr><td align=center colspan=3>')
	goBack()
	page.write('</td></tr>')
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def showAccessLog():
	if page.pwdFlag < 4: return finished('Forbidden To Read')
	access = page.game.file('access')
	try:
		file = open(access, encoding='latin-1')
		contents = ''.join([x for x in reversed(file.readlines())]) # file.read()
		file.close()
	except: contents = '(No Accesses Logged)'
	page.write("""
		<tr valign=top bgcolor="#CCCCCC">
		<td align=center class="grey"><b>Game Access Log</b></td>
		</tr>
		<tr><td align=center class=bodycopy>
		<blockquote><b><p align=justify>&nbsp;<br>
		The DPjudge game access log is only one of a large number
		of methods by which potential problem players (cheaters) can
		be detected.  If you suspect that any person is playing more
		than one power, you can check the IP addresses and times at
		which those powers have logged in at the Website, and
		<a href="mailto:%s?subject=CHEATING in %s"><font color=red>report
		any issue to the judgekeeper!!</font></a>
		Again, a number of other automatic checks are continually
		occurring -- it is possible that the judgekeeper may already
		be aware of and monitoring an issue.</p></b></blockquote>
		<textarea cols=88 rows=20>%s</textarea><p>
		""" % (page.game.jk.address[0], page.game.name, contents))
	goBack()
	page.write('<br>&nbsp;<BR>')
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addOption(option):
	page.write(
		"""
		<input type="checkbox" name="%s">&nbsp;<a
			href="javascript: describeOption('%s')"
			onMouseOver="window.status='Show Description of %s';return(1);"
			onMouseOut="window.status='';return(1);">%s</a>
		""" % (option.lower(), option, option, option))
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addPeriod(label, period, name, diurnal = 0):
	length, unit = period[:-1], period[-1:] or diurnal and 'H' or 'D'
	page.write("""
		%s<input type=text size=3 name=%s class=numberBox
		value=%s><select class=numberBox name=%ss>
		""" % (label and '<b>%s</b>&nbsp;' % (label) or '', name, length, name))
	for opt in 'MH' + 'DW' * (not diurnal):
		page.write('<option%s>%s</option>' % (' selected' * (opt == unit), opt))
	page.write('</select>')
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addPeriodToDroplist(period, name):
	page.write("""
		<script>
		function add%s() {
			var numberbox = document.master.%s;
			var period = numberbox.value.trim();
			if (!/^[1-9]\d*$/.test(period)) {
				alert('Please fill in a positive integer number.');
			} else {
				period += document.master.%ss.value;
				var droplist = document.master.%s;
				var idx = droplist.length;
				var opt = document.createElement('option');
				opt.value = opt.text = period;
				droplist.options.add(opt);
				droplist.selectedIndex = idx;
				numberbox.value = '';
				if (idx > 0) {
					period = ',' + period;
				} else {
					droplist.parentNode.style.display = 'inline';
				}
				document.master.%ss.value += period;
			}
		}
		</script>
		""" % (name.title(), period, period, name, name))
	page.write('<input type=button class=inputSubmit value=Add'
		' onClick=add%s()>' % name.title())
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addTimeToDroplist(hour, minute, name):
	page.write("""
		<script>
		function add%s() {
			var hourbox = document.master.%s;
			var hour = hourbox.value.trim();
			var minutebox = document.master.%s;
			var minute = minutebox.value.trim();
			if (!/^([01]?\d|2[0-3])$/.test(hour) || !/^[0-5]?\d$/.test(minute)) {
				alert('Please fill in a valid time.');
			} else {
				hour = ('0' + hour).slice(-2);
				minute = ('0' + minute).slice(-2);
				time = hour + ':' + minute;
				var droplist = document.master.%s;
				var idx = droplist.length;
				var opt = document.createElement('option');
				opt.value = opt.text = time;
				droplist.options.add(opt);
				droplist.selectedIndex = idx;
				hourbox.value = minutebox.value = '';
				if (idx > 0) {
					time = ',' + time;
				} else {
					droplist.parentNode.style.display = 'inline';
				}
				document.master.%ss.value += time;
			}
		}
		</script>
		""" % (name.title(), hour, minute, name, name))
	page.write('<input type=button class=inputSubmit value=Add'
		' onClick=add%s()>' % name.title())
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addDroplist(droplist, name):
	page.write("""
		<script>
		function drop%s() {
			var droplist = document.master.%s;
			if (droplist.length > 0) {
				var idx = droplist.selectedIndex;
				droplist.options.remove(idx);
				var options = [];
				if (droplist.length > 0) {
					if (idx == 0) {
						idx = droplist.length;
					}
					droplist.selectedIndex = idx - 1;
					for (idx = 0; idx < droplist.length; idx++) {
						options.push(droplist.options[idx].value);
					}
				} else {
					droplist.parentNode.style.display = 'none';
				}
				document.master.%ss.value = options.join();
			}
		}
		</script>
		""" % (name.title(), name, name))
	page.write('<span%s><select class=bodycopy name=%s>' %
		(' style="display:none;"' * (not droplist), name))
	if droplist:
		for drop in droplist[:-1]:
			page.write('<option>%s</option>' % drop)
		page.write('<option selected>%s</option>' % droplist[-1])
	page.write('</select>&nbsp;'
		'<input type=button class=inputSubmit value=Drop'
		' onClick=drop%s()>' % name.title())
	page.write('<input type=hidden name=%ss value=%s></span> &nbsp;' %
		(name, ','.join(droplist)))
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def addRoll(phase, forward = 0):
	game = page.game
	if page.pwdFlag < 4 + (not forward and game.phase == 'COMPLETED'
	and 'SOLITAIRE' not in game.rules): return
	if forward:
		if phase != 'FORMING': phase = game.phaseLong(phase)
		phase = game.probeNextPhase(phase)
		if not phase: return
		phase = game.phaseAbbr(phase)
	statFile = game.file('status')
	page.write(
		"""
		<script>
		function describeOption(option)
		{
			window.open('<URL>?page=showRule&file=Email&tag=OPTION&rule=' +
				option, 'option', 'width=400,height=120,status=no,' +
				'toolbar=no,resizable=yes,scrollbars=yes')
		}
		function rollto() {
			var full = "while", restore = "while";
			confirmation = "Roll%s to " + document.roll.phase.value;
			if (document.roll.phase.value != "FORMING") {
				if (!document.roll.restore.checked) restore = "without";
				confirmation += " " + restore + " restoring orders, and";
			}
			if (!document.roll.full.checked) full = "without";
			confirmation += " " + full + " restoring all non-transient" +
				" parameters, like rules, game description," +
				" resigned players, etc.?";
			if (!confirm(confirmation)) {
				return false;
			}
			document.roll.submit();
		}
		</script>
		<form name=roll method=post>
		""" % (forward and ' forward' or 'back'))
	hideBack('Update')
	page.apprise('action', 'roll' + (forward and 'forward' or 'back'))
	page.apprise('stamp', int(os.path.getmtime(statFile)))
	page.apprise('phase', phase)
	page.write("""
		<input type="button" value="Roll%s to %s" class="inputSubmit"
		onclick="rollto()"> <b>with</b>
		""" % (forward and ' forward' or 'back', phase))
	addOption('FULL')
	if phase != 'FORMING': addOption('RESTORE')
	page.write('</form>')
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def powerData():
	if not page.game.powers: return
	for num, power in enumerate(page.game.powers):
		page.apprise('powerData%d' % num, '')
	page.write(
		"""
		<script>
		var lastPower = 0;
		var powerData = new Array();
		var isGone = new Array();
		var isDummy = new Array();
		var isUnplayed = new Array();
		var powerType = new Array();
		function fillPower()
		{
			powerData[lastPower] = document.master.powerData.value;
			document.master['powerData' +
				document.master.powerChoice.options[lastPower].value].value =
				powerData[lastPower];
			lastPower = document.master.powerChoice.options.selectedIndex;
			document.master.powerData.value = powerData[lastPower];
			document.master.resign.checked = isGone[lastPower];
			document.master.resign.disabled = isGone[lastPower]
				&& isUnplayed[lastPower];
			document.master.dummy.checked = isDummy[lastPower];
			document.master.dummy.disabled = powerType[lastPower] != ""
				|| isDummy[lastPower] && isUnplayed[lastPower];
		}
		""")
	text = first = isGone = isDummy = ''
	for num, power in enumerate(page.game.powers):
		text += '<option value=%d>%s</option>' % (num, power.name)
		item = `power`.strip()
		page.write('powerData[%d] = %s;\n' % (num, `item`))
		gone, dum = power.isResigned(), power.isDummy()
		unplay = len(power.player) < (gone and 3 or dum and 3 or 1)
		page.write('powerType[%d] = "%s";' % (num, power.type or ''))
		page.write('isDummy[%d] = %s;' % (num, ('false', 'true')[dum]))
		page.write('isGone[%d] = %s;' % (num, ('false', 'true')[gone]))
		page.write('isUnplayed[%d] = %s;' % (num, ('false', 'true')[unplay]))
		page.write('document.master["powerData%s"].value = %s' %
			(`num`, `item`))
		if not first:
			first = `power`
			isGone = ('checked' + ' disabled' * unplay) * gone
			isDummy = power.type and 'disabled' or (
				'checked' + ' disabled' * unplay) * dum
	page.write(
		"""
		function alterPlayer(checkbox)
		{
			var act = checkbox.name;
			if (!checkbox.checked) act = "revive";
			var who = document.master.powerChoice.options[
				document.master.powerChoice.options.selectedIndex].text;
			if (!confirm("Are you sure you want to " + act + " " + who + "?"))
			{
				checkbox.checked = !checkbox.checked;
				return false;
			}
			prepSubmit();
		}
		</script>
		<tr><td colspan=3><hr></td></tr>
		<tr valign=top>
		<td class="bodycopy"><b>Data&nbsp;for:&nbsp;<select class=inputBox
		name=powerChoice onchange=fillPower()>%s</select>
		<br><br>
		Resign&nbsp;this&nbsp;power?&nbsp;<input type=checkbox %s name=resign
			onclick="alterPlayer(this)">
		<br>
		Make a <tt>DUMMY</tt>? <input type=checkbox %s name=dummy
			onclick="alterPlayer(this)">
		</b></td>
		""" % (text, isGone, isDummy))
	page.write(
		"""
		<td colspan=2 class=bodycopy align="center">
		<textarea class=bodycopy name=powerData wrap=off
		rows=20 cols=80>%s</textarea>
		</td></tr>
		""" % first)
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def reportUpdateError(error):
	page.write("""
		<tr><th align=left class=bodycopy bgcolor=red><font color=yellow>
		<center><font size=2>&nbsp;<br>Update Aborted</font>
		</center><blockquote> %s
		</blockquote><center>
		""" % error)
	goBack()
	page.write("""
		</center><blockquote>Note that if you use your browser's
		"Back" button to return to the status page (rather than the
		button above), you will need to "Reload" the screen to see
		the latest contents of the status file before making
		changes.</blockquote>
		</th></tr>
		""")
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def updateMaster():
	game, action = page.game, page.setdefault('action')
	if page.pwdFlag > 3: pass
	elif (action not in ('deadline', 'present')
	or 'PLAYER_DEADLINES' not in game.rules): return reportUpdateError(
		'Only the Master can update the game status file.')
	elif page.pwdFlag < 3: return reportUpdateError('Only players ' +
		'or the Master can change the deadline or cancel absences.')
	statFile = ''
	if 'stamp' in vars(page):
		statFile = game.file('status')
		if page.stamp != `int(os.path.getmtime(statFile))`:
			return reportUpdateError(
				"""
				While you were entering your modifications,
				the game status file was updated by another participant in the
				game or by the DPjudge.  Your changes were not made.
				""")
	#	----------
	#	Roll phase
	#	----------
	if action in ('rollback', 'rollforward'):
		flags = page.has('restore') * 1 + page.has('full') * 2 + (
			game.jk.password and page.password == game.jk.password) * 16
		if page.action == 'rollforward':
			error = game.rollforward(page.phase, flags | 4)
		else: error = game.rollback(page.phase, flags)
		if error: return reportUpdateError(error + '.')
		return finished('Phase Rolled ' + action[4:].title())
	#	----------------
	#	Process the turn
	#	----------------
	if action == 'process':
		error = game.process(now=1)
		if error: return reportUpdateError(error + '.')
		return finished(('Turn Processed', 'Game Completed')[
			game.phase == 'COMPLETED'])
	#	----------------------
	#	Game mode modification
	#	----------------------
	games = Status()
	gameMode, gameVariant = game.status[1:], page.setdefault('curVariant',
		game.__class__.__name__[:-4].lower())
	if 'formMode' in vars(page):
		if page.formMode == 'active' and gameMode[0] != 'forming':
			game.status[1] = 'forming'
		page.gameMode = page.formMode
	if 'gameMode' in vars(page):
		if page.gameMode == 'active':
			if game.phase == 'FORMING': 
				if game.status[1] == 'waiting':
					game.status[1] = 'forming'
				responding = game.begin() or ''
				untouched = responding and 'Not ' or ''
				return finished('Game %sStarted' % untouched, responding)
		gameMode[0] = page.gameMode
		game.status[1:] = gameMode
	if page.has('list') and page.has('unlist') != ('unlisted' in gameMode):
		try: gameMode.remove('unlisted')
		except: gameMode += ['unlisted']
	games.update(game.name, gameMode, gameVariant)
	#	---------------
	#	Deadline change
	#	---------------
	deathnote = None
	if 'date' in vars(page) and 'NO_DEADLINE' not in game.rules:
		dead, time = page.date.split(' ')
		dead, time = map(int, dead.split('/')), map(int, time.split(':'))
		try: deadline = ('%d%02d%02d' % (dead[0], dead[1], dead[2]) +
			'%02d%02d' % (time[0], time[1]))
		except: return reportUpdateError('Invalid deadline time')
		deadline = game.getTime(deadline)
		if not 'REAL_TIME' in game.rules: deadline = deadline.trunc(up = 1)
		if deadline < game.getTime():
			return reportUpdateError('Cannot set deadline in the past')
		game.deadline = deadline
		deathnote = ('The deadline for game ' +
			"'%s' has been changed.\n" % game.name)
	if action in ('state', 'form', 'deadline'):
		if deathnote:
			game.save()
			deathnote += 'The deadline is now %s.\n' % game.timeFormat()
			game.mailPress(None, ['All!'], deathnote,
				subject = 'Diplomacy deadline changed')
		return finished()
	#	--------------
	#	Revoke absence
	#	--------------
	if action == 'revoke':
		if 'presence' not in vars(page) or 'NOT' not in game.timing:
			return finished(0, 'No Absence to Revoke')
		absences = game.timing['NOT'].split(',')
		if page.presence not in absences:
			return finished(0, 'No Absence to Revoke')
		absences = [x for x in absences if x != page.presence]
		if not absences: del game.timing['NOT']
		else: game.timing['NOT'] = ','.join(absences)
		game.save()
		game.mailPress(None, ['All!'],
			'The absence %s was revoked' % game.formatPeriod(page.presence,
			0, 2), subject = 'Diplomacy absence revoked')
		return finished()
	#	------------------
	#	Update status file
	#	------------------
	#	NEW STUFF (TO BE USED TO UPDATE WITH)
	for guy in ('desc', 'origin', 'zone', 'status', 'morphs'):
		if guy not in vars(page): vars(page)[guy] = ''
	if 'map' in vars(page):
		trial = page.map[:1] == '*'
		game.map = Map(page.map[trial:], trial)
	if 'privacy' in vars(page):
		if page.privacy == 'public': game.private = None
		elif page.private: game.private = page.private
		else: return reportUpdateError('Empty privacy password')
	if page.desc: game.desc = page.desc.split('\n')
	else: game.desc = []
	if page.origin: game.origin = page.origin.split('\n')
	else: game.origin = []
	if page.morphs: game.morphs = page.morphs.split('\n')
	else: game.morphs = []
	page.extra = page.status.split('\n')
	extract('JUDGE', isList = 1)
	extract('BEGIN', 'firstPhase')
	extract('START')
	extract('FINISH', 'end')
	extract('RESULT', 'outcome', 1)
	extract('SIGNON')
	extract('NEED', 'avail', 1)
	extract('ROTATE', isList = 1)
	extract('NEWHOME', 'homeYears', 1)
	extract('ALLOW', 'playerTypes', 1)
	extract('FLOW', isList = 1)
	extract('VICTORY', isList = 1)
	extract('PROPOSAL', isList = 1)
	extract('DELAY')
	extract('PROCESSED')
	extract('RESERVES', 'extra', 1)
	extract('MILITIA', 'defense', 1)
	game.rules = [x[5:] for x in vars(page) if x[:5] == 'RULE_']
	game.validateRules()
	if game.error:
		return reportUpdateError('<br>'.join(
			['The following rule violations were detected:'] + game.error))
	if page.zone != (game.zone and game.zone.__repr__() or 'GMT'):
		game.setTimeZone(page.zone)
		deathnote = ('The time zone for game ' +
			"'%s' has been changed to %s (%s).\n" % (
			game.name, page.zone, TimeZone(page.zone).gmtlabel()))
	if game.phase in ('FORMING', 'COMPLETED'):
		game.deadline = None
	elif 'NO_DEADLINE' in game.rules:
		if game.deadline:
			game.deadline = None
			deathnote = ("There's no deadline anymore because of " +
				'the NO_DEADLINE rule.\n')
	elif not game.deadline:
		game.setDeadline()
		deathnote = 'The NO_DEADLINE rule has been removed.\n'
	if deathnote:
		if game.deadline:
			deathnote += 'The deadline is now %s.\n' % game.timeFormat()
		game.mailPress(None, ['All!'], deathnote,
			subject = 'Diplomacy deadline changed')
	game.timing = {}
	if 'tdays' in vars(page):
		days = page.tdays.strip()
		if days:
			if days == days.lower(): days = days.upper()
			if days != '-MTWTF-': game.timing['DAYS'] = days
	hour = minute = ''
	if 'thour' in vars(page): hour = page.thour.strip()
	if 'tminute' in vars(page): minute = page.tminute.strip()
	if 'ttimes' in vars(page): game.timing['AT'] = page.ttimes
	if hour or minute:
		if hour: hour = ('0' + hour)[-2:]
		if minute: minute = ('0' + minute)[-2:]
		if 'AT' in game.timing: game.timing['AT'] += ',' + hour + ':' + minute
		else: game.timing['AT'] = hour + ':' + minute
	if 'tfudge' in vars(page):
		game.timing['FUDGE'] = page.tfudge.strip() + page.tfudges
	if 'tstart' in vars(page):
		game.timing['START'] = page.tstart.strip() + page.tstarts
	if 'tnext' in vars(page):
		next = page.tnext.strip()
		if next:
			next += page.tnexts
			if next != '1D': game.timing['NEXT'] = next
	else: next = ''
	if 'tmove' in vars(page):
		move = page.tmove.strip()
		if move:
			move += page.tmoves
			if (move != '3D' or next and next != '1D') and next != move:
				game.timing['MOVE'] = move
			else: move = ''
	else: move = ''
	if next == '1D' and not move: game.timing['NEXT'] = next
	if 'twarnings' in vars(page):
		game.timing['WARN'] = page.twarnings
	if 'twarn' in vars(page):
		warn = page.twarn.strip()
		if warn:
			if 'WARN' in game.timing:
				game.timing['WARN'] += ',' + warn + page.twarns
			else: game.timing['WARN'] = warn + page.twarns
	if 'tgrace' in vars(page):
		grace = page.tgrace.strip()
		if grace:
			game.timing['GRACE'] = grace + page.tgraces
	game.terrain, game.teams = {}, []	# it will be in page.extra if given....
	if game.tester and game.tester[-1:] == '!':
		game.tester = ''	# and this one?
	if 'corrupt' in game.status or not statFile: return finished()
	#--------------
	# Write the file
	#--------------
	try:
		shutil.copyfile(statFile, game.file('status.backup'))
		file = open(statFile, 'w')
		temp = unicode(`game`, 'latin-1').strip()
		file.write(temp.encode('latin-1'))
		del temp
		if page.extra:
			temp = '\n' + '\n'.join(page.extra).strip()
			file.write(temp.encode('latin-1'))
			del temp
		for num, power in enumerate(game.powers):
			temp = '\n\n%s' % \
				vars(page)['powerData%s' % `num`].replace('\015','')
			file.write(temp.encode('latin-1'))
			del temp
		file.close()
	except:
		page.write('<H1 align=center>Cannot write to Status File!</H1>')
		print statFile
		import traceback
		print '<!--'
		traceback.print_tb(os.sys.exc_traceback, None, os.sys.stdout)
		traceback.print_exc(None, os.sys.stdout)
		print '-->'
		return
	oldState = dict(game.state)
	game = page.game = game.__class__(game.name)
	game.state = oldState
	try: games.dict[game.name].remove('private')
	except: pass
	if game.private: games.dict[game.name] += ['private']
	games.save()
	try: os.chmod(game.fileName, 0666)
	except: pass
	gamename = game.name
	game.updateState()
	untouched = ''
	if checkErrors():
		untouched = 'No '
		try: shutil.copyfile(game.file('status.backup'), statFile)
		except: untouched = ''
	finished(untouched + 'Update Made')
	if untouched: return
	####################################################
	### Now that we've updated the file, let's look at
	### specific functionality that would require re-
	### writing the web page data (i.e. we can't do it
	### above, but only with the file directly).
	####################################################
	rd_game = Status().load(gamename)
	if 'groups' in vars(page):
		if rd_game.groups != game.groups:
			rd_game.groups = game.groups
	if vars(page)['currpower'] != "NO POWERS":
		resign = vars(page)['dataresigned']
		dummy = vars(page)['datadummy']
		for target in rd_game.powers:
			if target.name == vars(page)['currpower']:
				if resign == 'true' and not target.isResigned():
					target.resign(byMaster = 1)
				elif resign == 'false' and target.isResigned():
					target.takeover(byMaster = 1)
				elif dummy == 'true' and not target.isDummy(): target.dummy()
				elif dummy == 'false' and target.isDummy():
					target.takeover(byMaster = 1)
	rd_game.save()
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def extract(key, var = 0, isList = 0):
	if not var: var = key.lower()
	for line in page.extra:
		word = line.split()
		if word and word[0].upper() == key.upper():
			page.extra.remove(line)
			val = word[1:]
			vars(page.game)[var] = word[1:]
			if not isList: val = ' '.join(val)
			vars(page.game)[var] = val
			return
#	----------------------------------------------------------------------
#
#
#	----------------------------------------------------------------------
def checkErrors():
	if not page.game.error and not page.game.map.error: return
	if page.power and page.power.omniscient < 3:
		page.write("""
			<script>
			alert(" Problems Found in Game %s File!" +
				"\\nPlease Report This To The GameMaster!");
			window.history.back();
			</script>
			""" % (page.game.map.error and 'Map' or 'Status'))
		raise SystemExit
	statuserror = [x for x in page.game.error
		if x not in page.game.map.error]
	if statuserror:
		page.write(
			"""
			<tr valign=top bgcolor="#CCCCCC">
			<th bgcolor=yellow class=bodycopy>
			<font color=red size=3>Problems Found in Game Status File</th></tr>
			<tr valign=top><th bgcolor=red class=bodycopy>
			<font color=yellow size=3><pre>
			""")
		map(page.write, statuserror)
		page.write('</pre></td></tr>')
	if page.game.map.error:
		page.write(
			"""
			<tr valign=top bgcolor="#CCCCCC">
			<th bgcolor=yellow class=bodycopy>
			<font color=red size=3>Problems Found in Game Map File</th></tr>
			<tr valign=top><th bgcolor=red class=bodycopy>
			<font color=yellow size=3><pre>
			""")
		map(page.write, page.game.map.error)
		page.write('</pre></td></tr>')
	return statuserror
#	----------------------------------------------------------------------
:>
